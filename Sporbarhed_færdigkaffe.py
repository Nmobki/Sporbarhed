#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from sqlalchemy import create_engine
import pyodbc
import urllib
import time

# =============================================================================
# Variables received from user input || Alle i denne variabel sektion skal laves om til brugerinput
# =============================================================================
Input_request_type = 0
Input_report_type = 0
Input_order_no = '033242' #BKI Extra
Input_pdf = 1
Input_excel = 1
Input_recipients = 'nmo@bki.dk'
Input_produkttype = 'FORM'
Input_note = 'test bemærkning ved anfordring bla bla bla'
# =============================================================================
# Variables generated by script without user input
# =============================================================================
Script_name = 'Sporbarhed_færdigkaffe.py'
Path_files = r'\\filsrv01\BKI\11. Økonomi\04 - Controlling\NMO\4. Kvalitet\Sporbarhedstest\Tests'
Request_id = int(time.time() * 100000) 
Reporttypes_sections = {0:['a1','a2'], 1:['b1','b2'], 2:['c1','c2']}

Server_04 = 'sqlsrv04'
Db_04 = 'BKI_Datastore'
Con_04 = pyodbc.connect('DRIVER={SQL Server};SERVER=' + Server_04 + ';DATABASE=' + Db_04)
Params_04 = urllib.parse.quote_plus('DRIVER={SQL Server Native Client 11.0};SERVER=sqlsrv04;DATABASE=BKI_Datastore;Trusted_Connection=yes')
Engine_04 = create_engine('mssql+pyodbc:///?odbc_connect=%s' % Params_04)

#dfCons.to_sql('ItemSegmentation', con=engine, schema='seg', if_exists='append', index=False)

Df_request = pd.DataFrame(data= {'Forespørgselstype':Input_request_type, 'Produkttype':Input_produkttype,
                                 'Rapporttype':Input_report_type, 'Rapport_modtager':Input_recipients,
                                 'Rapport_filsti':Path_files, 'Rapport_pdf':Input_pdf
                                 ,'Rapport_excel':Input_excel, 'Note_forespørgsel':Input_note
                                 ,'Forespørgsels_id':Request_id}, index=[0])

# pd.Dataframe(data={}).to_sql('Sporbarhed_sektion_log', con=Engine_04, schema='qa', if_exists='append', index=False)

print(Request_id)
print(Df_request)

# Insert request for report
def Request_insert(dataframe):
   try:
        dataframe.to_sql('Sporbarhed_forespørgsel', con=Engine_04, schema='trc', if_exists='append', index=False)
        pd.DataFrame(data={'Event':Script_name,'Note':'Request id: ' + str(Request_id)}, index=[0]).to_sql('Log', con=Engine_04, schema='dev', if_exists='append', index=False)
   except:
       pass # Evt. bedre error handling her, ved dog ikke hvad. Evt. email?
       
Request_insert(Df_request)

print('a1' in Reporttypes_sections[0])
# =============================================================================
#     Insert into relevant table
#     Insert into sektion log
#     Error handling
#     Types of errors (måske funktion??)
# =============================================================================

