#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from sqlalchemy import create_engine
import pyodbc
import urllib
from datetime import datetime


# =============================================================================
# Variables generated by script without user input
# =============================================================================
Script_name = 'Sporbarhed_færdigkaffe.py'
Path_files = r'\\filsrv01\BKI\11. Økonomi\04 - Controlling\NMO\4. Kvalitet\Sporbarhedstest\Tests'
# =============================================================================
# Variables for query connections
# =============================================================================
Server_04 = 'sqlsrv04'
Db_04 = 'BKI_Datastore'
Con_04 = pyodbc.connect(f'DRIVER=SQL Server;SERVER={Server_04};DATABASE={Db_04}')
Params_04 = urllib.parse.quote_plus(f'DRIVER=SQL Server Native Client 11.0;SERVER={Server_04};DATABASE={Db_04};Trusted_Connection=yes')
Engine_04 = create_engine(f'mssql+pyodbc:///?odbc_connect={Params_04}')

# Server_nav = 'sqlsrv03\navision'
# Db_nav = 'NAV100-DRIFT'
# Con_nav = pyodbc.connect('DRIVER=ODBC Driver 17 for SQL Server;SERVER=sqlsrv03\navision;DATABASE=NAV100-DRIFT;Trusted_Connection=yes')
# Params_nav = urllib.parse.quote_plus('DRIVER=SQL Server Native Client 11.0;SERVER=sqlsrv03\navision;DATABASE=NAV100-DRIFT;Trusted_Connection=yes')
# Engine_nav = create_engine(f'mssql+pyodbc:///?odbc_connect={Params_nav}')

Server_probat = '192.168.125.161'
Db_probat = 'BKI_IMP_EXP'
Con_probat = pyodbc.connect(f'DRIVER=SQL Server;SERVER={Server_probat};DATABASE={Db_probat};uid=bki_read;pwd=Probat2016')
Params_probat = urllib.parse.quote_plus(f'DRIVER=SQL Server Native Client 11.0;SERVER={Server_probat};DATABASE={Db_probat};Trusted_Connection=yes')
Engine_probat = create_engine(f'mssql+pyodbc:///?odbc_connect={Params_probat}')

# =============================================================================
# Read data from request
# =============================================================================
Query_request =  """SELECT TOP 1 [Id] ,[Forespørgselstype] ,[Produkttype]
                    ,[Rapporttype] ,[Rapport_modtager] ,[Rapport_pdf], [Ordrenummer]
                    ,[Rapport_excel] ,[Note_forespørgsel] FROM [trc].[Sporbarhed_forespørgsel]
                    WHERE [Forespørgsel_igangsat] IS NULL"""
Df_request = pd.read_sql(Query_request, Con_04)

Req_type = Df_request.loc[0, 'Forespørgselstype']
Req_report_type = Df_request.loc[0, 'Rapporttype']
Req_order_no = Df_request.loc[0, 'Ordrenummer'] 
Req_pdf = Df_request.loc[0, 'Rapport_pdf']
Req_excel = Df_request.loc[0, 'Rapport_excel']
Req_recipients = Df_request.loc[0, 'Rapport_modtager']
Req_produkttype = Df_request.loc[0, 'Produkttype'] # Behov for denne her?
Req_note = Df_request.loc[0, 'Note_forespørgsel']
Req_id = Df_request.loc[0, 'Id']

# =============================================================================
# Read setup for section for reporttypes
# =============================================================================
Query_reporttypes =  f"""SELECT [Sektion] ,[Sektion_synlig]
                       FROM [trc].[Sporbarhed_rapport_sektion]
                       WHERE [Rapporttype] = {Req_type} 
                       AND [Forespørgselstype] = {Req_report_type}"""
Df_sections = pd.read_sql(Query_reporttypes, Con_04)

# =============================================================================
# Queries for different parts of report
# =============================================================================
Query_samples = f""" SELECT KP.[Ordrenummer],KP.[Registreringstidspunkt]
            	,KP.[Registreret_af],KP.[Bemærkning],KP.[Prøvetype] AS [Prøvetype int]
                ,P.[Beskrivelse] AS [Prøvetype]
                ,CASE WHEN KP.[Kontrol_mærkning] = 1 THEN 'Ok' 
                WHEN KP.[Kontrol_mærkning] = 0 THEN 'Ej ok' END AS [Mærkning]
                ,CASE WHEN KP.[Kontrol_rygsvejning] = 1	THEN 'Ok'
                WHEN KP.[Kontrol_rygsvejning] = 0 THEN 'Ej ok' END AS [Rygsvejsning]
                ,CASE WHEN KP.[Kontrol_ventil] = 1 THEN 'Ok'
                WHEN KP.[Kontrol_ventil] = 0 THEN 'Ej ok' END AS [Ventil]
                ,CASE WHEN KP.[Kontrol_peelbar] = 1	THEN 'Ok'
                WHEN KP.[Kontrol_peelbar] = 0 THEN 'Ej ok' END AS [Peelbar]
                ,CASE WHEN KP.[Kontrol_tintie] = 1 THEN 'Ok'
                WHEN KP.[Kontrol_tintie] = 0 THEN 'Ej ok' END AS [Tintie]
                ,KP.[Vægt_aflæst],KP.[Kontrol_ilt],KP.[Silo]
                ,CASE WHEN SK.[Status] = 1 THEN 'Godkendt' WHEN SK.[Status] = 0
                THEN 'Afvist' ELSE 'Ej smagt' END AS [Smagning status]
                FROM [cof].[Kontrolskema_prøver] AS KP
                INNER JOIN [cof].[Prøvetype] AS P
                    ON KP.[Prøvetype] = P.[Id]
                LEFT JOIN [cof].[Smageskema] AS SK
                    ON KP.[Id] = SK.[Id_org]
                    AND SK.[Id_org_kildenummer] = 6
                WHERE KP.[Ordrenummer] = {Req_order_no} """

Query_nav_færdigvarer = f""" {Req_order_no}
                        """

Query_nav_vare = """ SELECT [No_] AS [Varenummer] ,[Description] AS [Navn]
                     FROM [dbo].[BKI foods a_s$Item]
                     WHERE [Item Category Code] IN ('FÆR KAFFE','RISTKAFFE','RÅKAFFE')
                     [No_] NOT LIKE '9%' """
# =============================================================================
# Variables based on queries above nessecary for queries below
# =============================================================================
Lotnumbers = ()
Probat_mølleordrer = ()
# =============================================================================
# Queries using variables based on previous queries                        
# =============================================================================
Query_nav_customers = f""" SELECT ILE.[Source No_] AS [Debitornummer]
                    	,C.[Name] AS [Navn]	,ILE.[Posting Date] AS [Dato]
                        E.[Item No_] AS [Varenummerr]
                        E.[Quantity] * -1 AS [Antal]
                        E.[Quantity] * I.[Net Weight] * -1 AS [Nettovægt]
                        FROM [dbo].[BKI foods a_s$Item Ledger Entry] AS ILE
                        INNER JOIN [dbo].[BKI foods a_s$Item] AS I
                        ON ILE.[Item No_] = I.[No_]
                        INNER JOIN [dbo].[BKI foods a_s$Customer] AS C
                        ON ILE.[Source No_] = C.[No_]
                        WHERE ILE.[Entry Type] = 1
                         ILE.[Lot No_] IN {Lotnumbers} """ 
                         
Query_probat_mølleordrer = f""" SELECT DATEADD(D, DATEDIFF(D, 0, [RECORDING_DATE] ), 0) AS [Dato]
                                ,[PRODUCTION_ORDER_ID] AS [Probat id]
                                ,[SOURCE_NAME] AS [Mølle] ,[ORDER_NAME] AS [Ordrenummer]
                            	,[D_CUSTOMER_CODE] AS [Receptnummer]
                            	,SUM([WEIGHT]) / 1000.0 AS [Kilo]
                                FROM [dbo].[PRO_EXP_ORDER_UNLOAD_G]
                                WHERE [ORDER_NAME] IN {Probat_mølleordrer}
                                GROUP BY 
                            	DATEADD(D, DATEDIFF(D, 0, [RECORDING_DATE] ), 0)
                            	,[PRODUCTION_ORDER_ID] ,[SOURCE_NAME]
                            	,[ORDER_NAME] ,[D_CUSTOMER_CODE] """



Df_prøver = pd.read_sql(Query_samples, Con_04)

# Get visibility for section from query
def Get_section_visibility(dataframe, section):
    return dataframe['Sektion_synlig'].iloc[section]

# Find statuscode for section log
def Get_section_status_code(dataframe, visibility):
    if len(dataframe) == 0:
        return 1 # Empty dataframe
    if visibility == 0:
        return 3 # Not active for selected reporting type
    else:
        return 99 # Continue

# Write into section log
def Section_log_insert(Start_time, Section, Statuscode):
    Df = pd.DataFrame(data={'Forespørgsels_id':Req_id,'Sektion':Section, 'Statuskode':Statuscode, 'Start_tid':Start_time}, index=[0])
    Df.to_sql('Sporbarhed_sektion_log', con=Engine_04, schema='trc', if_exists='append', index=False)


# Insert steps
def Step_insert(Step, Status, Start, End, Request_id):
    return None

# Check for kontrolprøver (18)
def Prepared_dataframe(Dataframe,Section_code):   
    X = Get_section_status_code(Dataframe, Get_section_visibility(Df_sections, 18))
    Now = datetime.now()
    
    if X != 99:
        Section_log_insert(Now, Section_code, X)
        return None
    else:
        try:
            Section_log_insert(Now, Section_code, 0)
            return Dataframe
        except:
            Section_log_insert(Now, Section_code, 2)

